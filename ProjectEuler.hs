import Debug.Trace

--prime generator
primes :: [Int]
primes = sieve $ filter (\x -> odd x || x == 2) [2..]
sieve :: [Int]->[Int]
--sieve (p:xs) =  p:sieve [ x | x <- xs, trace(" p=" ++ show p ++ " x=" ++ show x) $ x `mod` p /= 0] 
sieve (p:xs) =  p:sieve [ x | x <- xs, x `mod` p /= 0] 

--primes2 = 2 : 3 : ([5,7..] `minus` unionAll [[p*p, p*p+2*p..] | p <- tail primes2])

	

--If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
--Find the sum of all the multiples of 3 or 5 below 1000.
problem1 :: [Int]->Int
problem1 xs = sum[x | x <- xs, x `mod` 3 == 0 || x `mod` 5 == 0]
--run statement
--problem1 [1..1000]

--Problem 2
--Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
--1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
--By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
problem2 :: Int->Int
problem2 0 = 0
problem2 1 = 1
problem2 n 
	| (even x) = x
	| otherwise = 0
	where x = (problem2(n-1) + problem2(n-2))
--run statement
--takeWhile (<4000000) (map problem2 [1..1000])

problem_2 = sum [ x | x <- takeWhile (<= 1000000) fibs, even x]
  where
    fibs = 1 : 1 : zipWith (+) fibs (tail fibs)

	
--The prime factors of 13195 are 5, 7, 13 and 29.
--What is the largest prime factor of the number 600851475143 ?
problem3 :: Int
problem3 = maximum $ filter (\y -> 100`mod`y == 0) (takeWhile (\x -> x < (600851475142`div`2)) primes)

